// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/04/2013 21:58:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DUT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DUT_vlg_sample_tst(
	X,
	Y,
	sampler_tx
);
input [7:0] X;
input [7:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DUT_vlg_check_tst (
	DBL,
	Error,
	NEG,
	PP0,
	PP1,
	PP2,
	PP3,
	Result,
	Result_Compare,
	SGL,
	Sign0,
	Sign1,
	Sign2,
	Sign3,
	sampler_rx
);
input [3:0] DBL;
input [15:0] Error;
input [3:0] NEG;
input [8:0] PP0;
input [8:0] PP1;
input [8:0] PP2;
input [8:0] PP3;
input [15:0] Result;
input [15:0] Result_Compare;
input [3:0] SGL;
input  Sign0;
input  Sign1;
input  Sign2;
input  Sign3;
input sampler_rx;

reg [3:0] DBL_expected;
reg [15:0] Error_expected;
reg [3:0] NEG_expected;
reg [8:0] PP0_expected;
reg [8:0] PP1_expected;
reg [8:0] PP2_expected;
reg [8:0] PP3_expected;
reg [15:0] Result_expected;
reg [15:0] Result_Compare_expected;
reg [3:0] SGL_expected;
reg  Sign0_expected;
reg  Sign1_expected;
reg  Sign2_expected;
reg  Sign3_expected;

reg [3:0] DBL_prev;
reg [15:0] Error_prev;
reg [3:0] NEG_prev;
reg [8:0] PP0_prev;
reg [8:0] PP1_prev;
reg [8:0] PP2_prev;
reg [8:0] PP3_prev;
reg [15:0] Result_prev;
reg [15:0] Result_Compare_prev;
reg [3:0] SGL_prev;
reg  Sign0_prev;
reg  Sign1_prev;
reg  Sign2_prev;
reg  Sign3_prev;

reg [3:0] DBL_expected_prev;
reg [15:0] Error_expected_prev;
reg [3:0] NEG_expected_prev;
reg [8:0] PP0_expected_prev;
reg [8:0] PP1_expected_prev;
reg [8:0] PP2_expected_prev;
reg [8:0] PP3_expected_prev;
reg [15:0] Result_expected_prev;
reg [15:0] Result_Compare_expected_prev;
reg [3:0] SGL_expected_prev;
reg  Sign0_expected_prev;
reg  Sign1_expected_prev;
reg  Sign2_expected_prev;
reg  Sign3_expected_prev;

reg [3:0] last_DBL_exp;
reg [15:0] last_Error_exp;
reg [3:0] last_NEG_exp;
reg [8:0] last_PP0_exp;
reg [8:0] last_PP1_exp;
reg [8:0] last_PP2_exp;
reg [8:0] last_PP3_exp;
reg [15:0] last_Result_exp;
reg [15:0] last_Result_Compare_exp;
reg [3:0] last_SGL_exp;
reg  last_Sign0_exp;
reg  last_Sign1_exp;
reg  last_Sign2_exp;
reg  last_Sign3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	DBL_prev = DBL;
	Error_prev = Error;
	NEG_prev = NEG;
	PP0_prev = PP0;
	PP1_prev = PP1;
	PP2_prev = PP2;
	PP3_prev = PP3;
	Result_prev = Result;
	Result_Compare_prev = Result_Compare;
	SGL_prev = SGL;
	Sign0_prev = Sign0;
	Sign1_prev = Sign1;
	Sign2_prev = Sign2;
	Sign3_prev = Sign3;
end

// update expected /o prevs

always @(trigger)
begin
	DBL_expected_prev = DBL_expected;
	Error_expected_prev = Error_expected;
	NEG_expected_prev = NEG_expected;
	PP0_expected_prev = PP0_expected;
	PP1_expected_prev = PP1_expected;
	PP2_expected_prev = PP2_expected;
	PP3_expected_prev = PP3_expected;
	Result_expected_prev = Result_expected;
	Result_Compare_expected_prev = Result_Compare_expected;
	SGL_expected_prev = SGL_expected;
	Sign0_expected_prev = Sign0_expected;
	Sign1_expected_prev = Sign1_expected;
	Sign2_expected_prev = Sign2_expected;
	Sign3_expected_prev = Sign3_expected;
end


// expected Result[ 15 ]
initial
begin
	Result_expected[15] = 1'bX;
	Result_expected[15] = #999000 1'b0;
end 
// expected Result[ 14 ]
initial
begin
	Result_expected[14] = 1'bX;
	Result_expected[14] = #999000 1'b0;
end 
// expected Result[ 13 ]
initial
begin
	Result_expected[13] = 1'bX;
	Result_expected[13] = #999000 1'b0;
end 
// expected Result[ 12 ]
initial
begin
	Result_expected[12] = 1'bX;
	Result_expected[12] = #999000 1'b0;
end 
// expected Result[ 11 ]
initial
begin
	Result_expected[11] = 1'bX;
	Result_expected[11] = #999000 1'b0;
end 
// expected Result[ 10 ]
initial
begin
	Result_expected[10] = 1'bX;
	Result_expected[10] = #999000 1'b0;
end 
// expected Result[ 9 ]
initial
begin
	Result_expected[9] = 1'bX;
	Result_expected[9] = #999000 1'b0;
end 
// expected Result[ 8 ]
initial
begin
	Result_expected[8] = 1'bX;
	Result_expected[8] = #999000 1'b0;
end 
// expected Result[ 7 ]
initial
begin
	Result_expected[7] = 1'bX;
	Result_expected[7] = #999000 1'b0;
end 
// expected Result[ 6 ]
initial
begin
	Result_expected[6] = 1'bX;
	Result_expected[6] = #999000 1'b0;
end 
// expected Result[ 5 ]
initial
begin
	Result_expected[5] = 1'bX;
	Result_expected[5] = #999000 1'b0;
end 
// expected Result[ 4 ]
initial
begin
	Result_expected[4] = 1'bX;
	Result_expected[4] = #999000 1'b0;
end 
// expected Result[ 3 ]
initial
begin
	Result_expected[3] = 1'bX;
	Result_expected[3] = #999000 1'b0;
end 
// expected Result[ 2 ]
initial
begin
	Result_expected[2] = 1'bX;
	Result_expected[2] = #999000 1'b0;
end 
// expected Result[ 1 ]
initial
begin
	Result_expected[1] = 1'bX;
	Result_expected[1] = #999000 1'b0;
end 
// expected Result[ 0 ]
initial
begin
	Result_expected[0] = 1'bX;
	Result_expected[0] = #999000 1'b0;
end 
// expected Result_Compare[ 15 ]
initial
begin
	Result_Compare_expected[15] = 1'bX;
	Result_Compare_expected[15] = #999000 1'b0;
end 
// expected Result_Compare[ 14 ]
initial
begin
	Result_Compare_expected[14] = 1'bX;
	Result_Compare_expected[14] = #999000 1'b0;
end 
// expected Result_Compare[ 13 ]
initial
begin
	Result_Compare_expected[13] = 1'bX;
	Result_Compare_expected[13] = #999000 1'b0;
end 
// expected Result_Compare[ 12 ]
initial
begin
	Result_Compare_expected[12] = 1'bX;
	Result_Compare_expected[12] = #999000 1'b0;
end 
// expected Result_Compare[ 11 ]
initial
begin
	Result_Compare_expected[11] = 1'bX;
	Result_Compare_expected[11] = #999000 1'b0;
end 
// expected Result_Compare[ 10 ]
initial
begin
	Result_Compare_expected[10] = 1'bX;
	Result_Compare_expected[10] = #999000 1'b0;
end 
// expected Result_Compare[ 9 ]
initial
begin
	Result_Compare_expected[9] = 1'bX;
	Result_Compare_expected[9] = #999000 1'b0;
end 
// expected Result_Compare[ 8 ]
initial
begin
	Result_Compare_expected[8] = 1'bX;
	Result_Compare_expected[8] = #999000 1'b0;
end 
// expected Result_Compare[ 7 ]
initial
begin
	Result_Compare_expected[7] = 1'bX;
	Result_Compare_expected[7] = #999000 1'b0;
end 
// expected Result_Compare[ 6 ]
initial
begin
	Result_Compare_expected[6] = 1'bX;
	Result_Compare_expected[6] = #999000 1'b0;
end 
// expected Result_Compare[ 5 ]
initial
begin
	Result_Compare_expected[5] = 1'bX;
	Result_Compare_expected[5] = #999000 1'b0;
end 
// expected Result_Compare[ 4 ]
initial
begin
	Result_Compare_expected[4] = 1'bX;
	Result_Compare_expected[4] = #999000 1'b0;
end 
// expected Result_Compare[ 3 ]
initial
begin
	Result_Compare_expected[3] = 1'bX;
	Result_Compare_expected[3] = #999000 1'b0;
end 
// expected Result_Compare[ 2 ]
initial
begin
	Result_Compare_expected[2] = 1'bX;
	Result_Compare_expected[2] = #999000 1'b0;
end 
// expected Result_Compare[ 1 ]
initial
begin
	Result_Compare_expected[1] = 1'bX;
	Result_Compare_expected[1] = #999000 1'b0;
end 
// expected Result_Compare[ 0 ]
initial
begin
	Result_Compare_expected[0] = 1'bX;
	Result_Compare_expected[0] = #999000 1'b0;
end 
// expected Error[ 15 ]
initial
begin
	Error_expected[15] = 1'b0;
end 
// expected Error[ 14 ]
initial
begin
	Error_expected[14] = 1'b0;
end 
// expected Error[ 13 ]
initial
begin
	Error_expected[13] = 1'b0;
end 
// expected Error[ 12 ]
initial
begin
	Error_expected[12] = 1'b0;
end 
// expected Error[ 11 ]
initial
begin
	Error_expected[11] = 1'b0;
end 
// expected Error[ 10 ]
initial
begin
	Error_expected[10] = 1'b0;
end 
// expected Error[ 9 ]
initial
begin
	Error_expected[9] = 1'b0;
end 
// expected Error[ 8 ]
initial
begin
	Error_expected[8] = 1'b0;
end 
// expected Error[ 7 ]
initial
begin
	Error_expected[7] = 1'b0;
end 
// expected Error[ 6 ]
initial
begin
	Error_expected[6] = 1'b0;
end 
// expected Error[ 5 ]
initial
begin
	Error_expected[5] = 1'b0;
end 
// expected Error[ 4 ]
initial
begin
	Error_expected[4] = 1'b0;
end 
// expected Error[ 3 ]
initial
begin
	Error_expected[3] = 1'b0;
end 
// expected Error[ 2 ]
initial
begin
	Error_expected[2] = 1'b0;
end 
// expected Error[ 1 ]
initial
begin
	Error_expected[1] = 1'b0;
end 
// expected Error[ 0 ]
initial
begin
	Error_expected[0] = 1'b0;
end 
// expected DBL[ 3 ]
initial
begin
	DBL_expected[3] = 1'bX;
end 
// expected DBL[ 2 ]
initial
begin
	DBL_expected[2] = 1'bX;
end 
// expected DBL[ 1 ]
initial
begin
	DBL_expected[1] = 1'bX;
end 
// expected DBL[ 0 ]
initial
begin
	DBL_expected[0] = 1'bX;
end 
// expected SGL[ 3 ]
initial
begin
	SGL_expected[3] = 1'bX;
end 
// expected SGL[ 2 ]
initial
begin
	SGL_expected[2] = 1'bX;
end 
// expected SGL[ 1 ]
initial
begin
	SGL_expected[1] = 1'bX;
end 
// expected SGL[ 0 ]
initial
begin
	SGL_expected[0] = 1'bX;
end 
// expected NEG[ 3 ]
initial
begin
	NEG_expected[3] = 1'bX;
end 
// expected NEG[ 2 ]
initial
begin
	NEG_expected[2] = 1'bX;
end 
// expected NEG[ 1 ]
initial
begin
	NEG_expected[1] = 1'bX;
end 
// expected NEG[ 0 ]
initial
begin
	NEG_expected[0] = 1'bX;
end 
// expected PP0[ 8 ]
initial
begin
	PP0_expected[8] = 1'bX;
end 
// expected PP0[ 7 ]
initial
begin
	PP0_expected[7] = 1'bX;
end 
// expected PP0[ 6 ]
initial
begin
	PP0_expected[6] = 1'bX;
end 
// expected PP0[ 5 ]
initial
begin
	PP0_expected[5] = 1'bX;
end 
// expected PP0[ 4 ]
initial
begin
	PP0_expected[4] = 1'bX;
end 
// expected PP0[ 3 ]
initial
begin
	PP0_expected[3] = 1'bX;
end 
// expected PP0[ 2 ]
initial
begin
	PP0_expected[2] = 1'bX;
end 
// expected PP0[ 1 ]
initial
begin
	PP0_expected[1] = 1'bX;
end 
// expected PP0[ 0 ]
initial
begin
	PP0_expected[0] = 1'bX;
end 
// expected PP1[ 8 ]
initial
begin
	PP1_expected[8] = 1'bX;
end 
// expected PP1[ 7 ]
initial
begin
	PP1_expected[7] = 1'bX;
end 
// expected PP1[ 6 ]
initial
begin
	PP1_expected[6] = 1'bX;
end 
// expected PP1[ 5 ]
initial
begin
	PP1_expected[5] = 1'bX;
end 
// expected PP1[ 4 ]
initial
begin
	PP1_expected[4] = 1'bX;
end 
// expected PP1[ 3 ]
initial
begin
	PP1_expected[3] = 1'bX;
end 
// expected PP1[ 2 ]
initial
begin
	PP1_expected[2] = 1'bX;
end 
// expected PP1[ 1 ]
initial
begin
	PP1_expected[1] = 1'bX;
end 
// expected PP1[ 0 ]
initial
begin
	PP1_expected[0] = 1'bX;
end 
// expected PP2[ 8 ]
initial
begin
	PP2_expected[8] = 1'bX;
end 
// expected PP2[ 7 ]
initial
begin
	PP2_expected[7] = 1'bX;
end 
// expected PP2[ 6 ]
initial
begin
	PP2_expected[6] = 1'bX;
end 
// expected PP2[ 5 ]
initial
begin
	PP2_expected[5] = 1'bX;
end 
// expected PP2[ 4 ]
initial
begin
	PP2_expected[4] = 1'bX;
end 
// expected PP2[ 3 ]
initial
begin
	PP2_expected[3] = 1'bX;
end 
// expected PP2[ 2 ]
initial
begin
	PP2_expected[2] = 1'bX;
end 
// expected PP2[ 1 ]
initial
begin
	PP2_expected[1] = 1'bX;
end 
// expected PP2[ 0 ]
initial
begin
	PP2_expected[0] = 1'bX;
end 
// expected PP3[ 8 ]
initial
begin
	PP3_expected[8] = 1'bX;
end 
// expected PP3[ 7 ]
initial
begin
	PP3_expected[7] = 1'bX;
end 
// expected PP3[ 6 ]
initial
begin
	PP3_expected[6] = 1'bX;
end 
// expected PP3[ 5 ]
initial
begin
	PP3_expected[5] = 1'bX;
end 
// expected PP3[ 4 ]
initial
begin
	PP3_expected[4] = 1'bX;
end 
// expected PP3[ 3 ]
initial
begin
	PP3_expected[3] = 1'bX;
end 
// expected PP3[ 2 ]
initial
begin
	PP3_expected[2] = 1'bX;
end 
// expected PP3[ 1 ]
initial
begin
	PP3_expected[1] = 1'bX;
end 
// expected PP3[ 0 ]
initial
begin
	PP3_expected[0] = 1'bX;
end 

// expected Sign0
initial
begin
	Sign0_expected = 1'bX;
end 

// expected Sign1
initial
begin
	Sign1_expected = 1'bX;
end 

// expected Sign2
initial
begin
	Sign2_expected = 1'bX;
end 

// expected Sign3
initial
begin
	Sign3_expected = 1'bX;
end 
// generate trigger
always @(DBL_expected or DBL or Error_expected or Error or NEG_expected or NEG or PP0_expected or PP0 or PP1_expected or PP1 or PP2_expected or PP2 or PP3_expected or PP3 or Result_expected or Result or Result_Compare_expected or Result_Compare or SGL_expected or SGL or Sign0_expected or Sign0 or Sign1_expected or Sign1 or Sign2_expected or Sign2 or Sign3_expected or Sign3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DBL = %b | expected Error = %b | expected NEG = %b | expected PP0 = %b | expected PP1 = %b | expected PP2 = %b | expected PP3 = %b | expected Result = %b | expected Result_Compare = %b | expected SGL = %b | expected Sign0 = %b | expected Sign1 = %b | expected Sign2 = %b | expected Sign3 = %b | ",DBL_expected_prev,Error_expected_prev,NEG_expected_prev,PP0_expected_prev,PP1_expected_prev,PP2_expected_prev,PP3_expected_prev,Result_expected_prev,Result_Compare_expected_prev,SGL_expected_prev,Sign0_expected_prev,Sign1_expected_prev,Sign2_expected_prev,Sign3_expected_prev);
	$display("| real DBL = %b | real Error = %b | real NEG = %b | real PP0 = %b | real PP1 = %b | real PP2 = %b | real PP3 = %b | real Result = %b | real Result_Compare = %b | real SGL = %b | real Sign0 = %b | real Sign1 = %b | real Sign2 = %b | real Sign3 = %b | ",DBL_prev,Error_prev,NEG_prev,PP0_prev,PP1_prev,PP2_prev,PP3_prev,Result_prev,Result_Compare_prev,SGL_prev,Sign0_prev,Sign1_prev,Sign2_prev,Sign3_prev);
`endif
	if (
		( DBL_expected_prev[0] !== 1'bx ) && ( DBL_prev[0] !== DBL_expected_prev[0] )
		&& ((DBL_expected_prev[0] !== last_DBL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBL_expected_prev);
		$display ("     Real value = %b", DBL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBL_exp[0] = DBL_expected_prev[0];
	end
	if (
		( DBL_expected_prev[1] !== 1'bx ) && ( DBL_prev[1] !== DBL_expected_prev[1] )
		&& ((DBL_expected_prev[1] !== last_DBL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBL_expected_prev);
		$display ("     Real value = %b", DBL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBL_exp[1] = DBL_expected_prev[1];
	end
	if (
		( DBL_expected_prev[2] !== 1'bx ) && ( DBL_prev[2] !== DBL_expected_prev[2] )
		&& ((DBL_expected_prev[2] !== last_DBL_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBL_expected_prev);
		$display ("     Real value = %b", DBL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBL_exp[2] = DBL_expected_prev[2];
	end
	if (
		( DBL_expected_prev[3] !== 1'bx ) && ( DBL_prev[3] !== DBL_expected_prev[3] )
		&& ((DBL_expected_prev[3] !== last_DBL_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBL_expected_prev);
		$display ("     Real value = %b", DBL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBL_exp[3] = DBL_expected_prev[3];
	end
	if (
		( Error_expected_prev[0] !== 1'bx ) && ( Error_prev[0] !== Error_expected_prev[0] )
		&& ((Error_expected_prev[0] !== last_Error_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[0] = Error_expected_prev[0];
	end
	if (
		( Error_expected_prev[1] !== 1'bx ) && ( Error_prev[1] !== Error_expected_prev[1] )
		&& ((Error_expected_prev[1] !== last_Error_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[1] = Error_expected_prev[1];
	end
	if (
		( Error_expected_prev[2] !== 1'bx ) && ( Error_prev[2] !== Error_expected_prev[2] )
		&& ((Error_expected_prev[2] !== last_Error_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[2] = Error_expected_prev[2];
	end
	if (
		( Error_expected_prev[3] !== 1'bx ) && ( Error_prev[3] !== Error_expected_prev[3] )
		&& ((Error_expected_prev[3] !== last_Error_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[3] = Error_expected_prev[3];
	end
	if (
		( Error_expected_prev[4] !== 1'bx ) && ( Error_prev[4] !== Error_expected_prev[4] )
		&& ((Error_expected_prev[4] !== last_Error_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[4] = Error_expected_prev[4];
	end
	if (
		( Error_expected_prev[5] !== 1'bx ) && ( Error_prev[5] !== Error_expected_prev[5] )
		&& ((Error_expected_prev[5] !== last_Error_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[5] = Error_expected_prev[5];
	end
	if (
		( Error_expected_prev[6] !== 1'bx ) && ( Error_prev[6] !== Error_expected_prev[6] )
		&& ((Error_expected_prev[6] !== last_Error_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[6] = Error_expected_prev[6];
	end
	if (
		( Error_expected_prev[7] !== 1'bx ) && ( Error_prev[7] !== Error_expected_prev[7] )
		&& ((Error_expected_prev[7] !== last_Error_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[7] = Error_expected_prev[7];
	end
	if (
		( Error_expected_prev[8] !== 1'bx ) && ( Error_prev[8] !== Error_expected_prev[8] )
		&& ((Error_expected_prev[8] !== last_Error_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[8] = Error_expected_prev[8];
	end
	if (
		( Error_expected_prev[9] !== 1'bx ) && ( Error_prev[9] !== Error_expected_prev[9] )
		&& ((Error_expected_prev[9] !== last_Error_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[9] = Error_expected_prev[9];
	end
	if (
		( Error_expected_prev[10] !== 1'bx ) && ( Error_prev[10] !== Error_expected_prev[10] )
		&& ((Error_expected_prev[10] !== last_Error_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[10] = Error_expected_prev[10];
	end
	if (
		( Error_expected_prev[11] !== 1'bx ) && ( Error_prev[11] !== Error_expected_prev[11] )
		&& ((Error_expected_prev[11] !== last_Error_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[11] = Error_expected_prev[11];
	end
	if (
		( Error_expected_prev[12] !== 1'bx ) && ( Error_prev[12] !== Error_expected_prev[12] )
		&& ((Error_expected_prev[12] !== last_Error_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[12] = Error_expected_prev[12];
	end
	if (
		( Error_expected_prev[13] !== 1'bx ) && ( Error_prev[13] !== Error_expected_prev[13] )
		&& ((Error_expected_prev[13] !== last_Error_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[13] = Error_expected_prev[13];
	end
	if (
		( Error_expected_prev[14] !== 1'bx ) && ( Error_prev[14] !== Error_expected_prev[14] )
		&& ((Error_expected_prev[14] !== last_Error_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[14] = Error_expected_prev[14];
	end
	if (
		( Error_expected_prev[15] !== 1'bx ) && ( Error_prev[15] !== Error_expected_prev[15] )
		&& ((Error_expected_prev[15] !== last_Error_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Error_exp[15] = Error_expected_prev[15];
	end
	if (
		( NEG_expected_prev[0] !== 1'bx ) && ( NEG_prev[0] !== NEG_expected_prev[0] )
		&& ((NEG_expected_prev[0] !== last_NEG_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEG_expected_prev);
		$display ("     Real value = %b", NEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEG_exp[0] = NEG_expected_prev[0];
	end
	if (
		( NEG_expected_prev[1] !== 1'bx ) && ( NEG_prev[1] !== NEG_expected_prev[1] )
		&& ((NEG_expected_prev[1] !== last_NEG_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEG_expected_prev);
		$display ("     Real value = %b", NEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEG_exp[1] = NEG_expected_prev[1];
	end
	if (
		( NEG_expected_prev[2] !== 1'bx ) && ( NEG_prev[2] !== NEG_expected_prev[2] )
		&& ((NEG_expected_prev[2] !== last_NEG_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEG_expected_prev);
		$display ("     Real value = %b", NEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEG_exp[2] = NEG_expected_prev[2];
	end
	if (
		( NEG_expected_prev[3] !== 1'bx ) && ( NEG_prev[3] !== NEG_expected_prev[3] )
		&& ((NEG_expected_prev[3] !== last_NEG_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEG_expected_prev);
		$display ("     Real value = %b", NEG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEG_exp[3] = NEG_expected_prev[3];
	end
	if (
		( PP0_expected_prev[0] !== 1'bx ) && ( PP0_prev[0] !== PP0_expected_prev[0] )
		&& ((PP0_expected_prev[0] !== last_PP0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[0] = PP0_expected_prev[0];
	end
	if (
		( PP0_expected_prev[1] !== 1'bx ) && ( PP0_prev[1] !== PP0_expected_prev[1] )
		&& ((PP0_expected_prev[1] !== last_PP0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[1] = PP0_expected_prev[1];
	end
	if (
		( PP0_expected_prev[2] !== 1'bx ) && ( PP0_prev[2] !== PP0_expected_prev[2] )
		&& ((PP0_expected_prev[2] !== last_PP0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[2] = PP0_expected_prev[2];
	end
	if (
		( PP0_expected_prev[3] !== 1'bx ) && ( PP0_prev[3] !== PP0_expected_prev[3] )
		&& ((PP0_expected_prev[3] !== last_PP0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[3] = PP0_expected_prev[3];
	end
	if (
		( PP0_expected_prev[4] !== 1'bx ) && ( PP0_prev[4] !== PP0_expected_prev[4] )
		&& ((PP0_expected_prev[4] !== last_PP0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[4] = PP0_expected_prev[4];
	end
	if (
		( PP0_expected_prev[5] !== 1'bx ) && ( PP0_prev[5] !== PP0_expected_prev[5] )
		&& ((PP0_expected_prev[5] !== last_PP0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[5] = PP0_expected_prev[5];
	end
	if (
		( PP0_expected_prev[6] !== 1'bx ) && ( PP0_prev[6] !== PP0_expected_prev[6] )
		&& ((PP0_expected_prev[6] !== last_PP0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[6] = PP0_expected_prev[6];
	end
	if (
		( PP0_expected_prev[7] !== 1'bx ) && ( PP0_prev[7] !== PP0_expected_prev[7] )
		&& ((PP0_expected_prev[7] !== last_PP0_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[7] = PP0_expected_prev[7];
	end
	if (
		( PP0_expected_prev[8] !== 1'bx ) && ( PP0_prev[8] !== PP0_expected_prev[8] )
		&& ((PP0_expected_prev[8] !== last_PP0_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP0_expected_prev);
		$display ("     Real value = %b", PP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PP0_exp[8] = PP0_expected_prev[8];
	end
	if (
		( PP1_expected_prev[0] !== 1'bx ) && ( PP1_prev[0] !== PP1_expected_prev[0] )
		&& ((PP1_expected_prev[0] !== last_PP1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[0] = PP1_expected_prev[0];
	end
	if (
		( PP1_expected_prev[1] !== 1'bx ) && ( PP1_prev[1] !== PP1_expected_prev[1] )
		&& ((PP1_expected_prev[1] !== last_PP1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[1] = PP1_expected_prev[1];
	end
	if (
		( PP1_expected_prev[2] !== 1'bx ) && ( PP1_prev[2] !== PP1_expected_prev[2] )
		&& ((PP1_expected_prev[2] !== last_PP1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[2] = PP1_expected_prev[2];
	end
	if (
		( PP1_expected_prev[3] !== 1'bx ) && ( PP1_prev[3] !== PP1_expected_prev[3] )
		&& ((PP1_expected_prev[3] !== last_PP1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[3] = PP1_expected_prev[3];
	end
	if (
		( PP1_expected_prev[4] !== 1'bx ) && ( PP1_prev[4] !== PP1_expected_prev[4] )
		&& ((PP1_expected_prev[4] !== last_PP1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[4] = PP1_expected_prev[4];
	end
	if (
		( PP1_expected_prev[5] !== 1'bx ) && ( PP1_prev[5] !== PP1_expected_prev[5] )
		&& ((PP1_expected_prev[5] !== last_PP1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[5] = PP1_expected_prev[5];
	end
	if (
		( PP1_expected_prev[6] !== 1'bx ) && ( PP1_prev[6] !== PP1_expected_prev[6] )
		&& ((PP1_expected_prev[6] !== last_PP1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[6] = PP1_expected_prev[6];
	end
	if (
		( PP1_expected_prev[7] !== 1'bx ) && ( PP1_prev[7] !== PP1_expected_prev[7] )
		&& ((PP1_expected_prev[7] !== last_PP1_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[7] = PP1_expected_prev[7];
	end
	if (
		( PP1_expected_prev[8] !== 1'bx ) && ( PP1_prev[8] !== PP1_expected_prev[8] )
		&& ((PP1_expected_prev[8] !== last_PP1_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP1_expected_prev);
		$display ("     Real value = %b", PP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PP1_exp[8] = PP1_expected_prev[8];
	end
	if (
		( PP2_expected_prev[0] !== 1'bx ) && ( PP2_prev[0] !== PP2_expected_prev[0] )
		&& ((PP2_expected_prev[0] !== last_PP2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[0] = PP2_expected_prev[0];
	end
	if (
		( PP2_expected_prev[1] !== 1'bx ) && ( PP2_prev[1] !== PP2_expected_prev[1] )
		&& ((PP2_expected_prev[1] !== last_PP2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[1] = PP2_expected_prev[1];
	end
	if (
		( PP2_expected_prev[2] !== 1'bx ) && ( PP2_prev[2] !== PP2_expected_prev[2] )
		&& ((PP2_expected_prev[2] !== last_PP2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[2] = PP2_expected_prev[2];
	end
	if (
		( PP2_expected_prev[3] !== 1'bx ) && ( PP2_prev[3] !== PP2_expected_prev[3] )
		&& ((PP2_expected_prev[3] !== last_PP2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[3] = PP2_expected_prev[3];
	end
	if (
		( PP2_expected_prev[4] !== 1'bx ) && ( PP2_prev[4] !== PP2_expected_prev[4] )
		&& ((PP2_expected_prev[4] !== last_PP2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[4] = PP2_expected_prev[4];
	end
	if (
		( PP2_expected_prev[5] !== 1'bx ) && ( PP2_prev[5] !== PP2_expected_prev[5] )
		&& ((PP2_expected_prev[5] !== last_PP2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[5] = PP2_expected_prev[5];
	end
	if (
		( PP2_expected_prev[6] !== 1'bx ) && ( PP2_prev[6] !== PP2_expected_prev[6] )
		&& ((PP2_expected_prev[6] !== last_PP2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[6] = PP2_expected_prev[6];
	end
	if (
		( PP2_expected_prev[7] !== 1'bx ) && ( PP2_prev[7] !== PP2_expected_prev[7] )
		&& ((PP2_expected_prev[7] !== last_PP2_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[7] = PP2_expected_prev[7];
	end
	if (
		( PP2_expected_prev[8] !== 1'bx ) && ( PP2_prev[8] !== PP2_expected_prev[8] )
		&& ((PP2_expected_prev[8] !== last_PP2_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP2_expected_prev);
		$display ("     Real value = %b", PP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PP2_exp[8] = PP2_expected_prev[8];
	end
	if (
		( PP3_expected_prev[0] !== 1'bx ) && ( PP3_prev[0] !== PP3_expected_prev[0] )
		&& ((PP3_expected_prev[0] !== last_PP3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[0] = PP3_expected_prev[0];
	end
	if (
		( PP3_expected_prev[1] !== 1'bx ) && ( PP3_prev[1] !== PP3_expected_prev[1] )
		&& ((PP3_expected_prev[1] !== last_PP3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[1] = PP3_expected_prev[1];
	end
	if (
		( PP3_expected_prev[2] !== 1'bx ) && ( PP3_prev[2] !== PP3_expected_prev[2] )
		&& ((PP3_expected_prev[2] !== last_PP3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[2] = PP3_expected_prev[2];
	end
	if (
		( PP3_expected_prev[3] !== 1'bx ) && ( PP3_prev[3] !== PP3_expected_prev[3] )
		&& ((PP3_expected_prev[3] !== last_PP3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[3] = PP3_expected_prev[3];
	end
	if (
		( PP3_expected_prev[4] !== 1'bx ) && ( PP3_prev[4] !== PP3_expected_prev[4] )
		&& ((PP3_expected_prev[4] !== last_PP3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[4] = PP3_expected_prev[4];
	end
	if (
		( PP3_expected_prev[5] !== 1'bx ) && ( PP3_prev[5] !== PP3_expected_prev[5] )
		&& ((PP3_expected_prev[5] !== last_PP3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[5] = PP3_expected_prev[5];
	end
	if (
		( PP3_expected_prev[6] !== 1'bx ) && ( PP3_prev[6] !== PP3_expected_prev[6] )
		&& ((PP3_expected_prev[6] !== last_PP3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[6] = PP3_expected_prev[6];
	end
	if (
		( PP3_expected_prev[7] !== 1'bx ) && ( PP3_prev[7] !== PP3_expected_prev[7] )
		&& ((PP3_expected_prev[7] !== last_PP3_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[7] = PP3_expected_prev[7];
	end
	if (
		( PP3_expected_prev[8] !== 1'bx ) && ( PP3_prev[8] !== PP3_expected_prev[8] )
		&& ((PP3_expected_prev[8] !== last_PP3_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PP3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PP3_expected_prev);
		$display ("     Real value = %b", PP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_PP3_exp[8] = PP3_expected_prev[8];
	end
	if (
		( Result_expected_prev[0] !== 1'bx ) && ( Result_prev[0] !== Result_expected_prev[0] )
		&& ((Result_expected_prev[0] !== last_Result_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[0] = Result_expected_prev[0];
	end
	if (
		( Result_expected_prev[1] !== 1'bx ) && ( Result_prev[1] !== Result_expected_prev[1] )
		&& ((Result_expected_prev[1] !== last_Result_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[1] = Result_expected_prev[1];
	end
	if (
		( Result_expected_prev[2] !== 1'bx ) && ( Result_prev[2] !== Result_expected_prev[2] )
		&& ((Result_expected_prev[2] !== last_Result_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[2] = Result_expected_prev[2];
	end
	if (
		( Result_expected_prev[3] !== 1'bx ) && ( Result_prev[3] !== Result_expected_prev[3] )
		&& ((Result_expected_prev[3] !== last_Result_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[3] = Result_expected_prev[3];
	end
	if (
		( Result_expected_prev[4] !== 1'bx ) && ( Result_prev[4] !== Result_expected_prev[4] )
		&& ((Result_expected_prev[4] !== last_Result_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[4] = Result_expected_prev[4];
	end
	if (
		( Result_expected_prev[5] !== 1'bx ) && ( Result_prev[5] !== Result_expected_prev[5] )
		&& ((Result_expected_prev[5] !== last_Result_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[5] = Result_expected_prev[5];
	end
	if (
		( Result_expected_prev[6] !== 1'bx ) && ( Result_prev[6] !== Result_expected_prev[6] )
		&& ((Result_expected_prev[6] !== last_Result_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[6] = Result_expected_prev[6];
	end
	if (
		( Result_expected_prev[7] !== 1'bx ) && ( Result_prev[7] !== Result_expected_prev[7] )
		&& ((Result_expected_prev[7] !== last_Result_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[7] = Result_expected_prev[7];
	end
	if (
		( Result_expected_prev[8] !== 1'bx ) && ( Result_prev[8] !== Result_expected_prev[8] )
		&& ((Result_expected_prev[8] !== last_Result_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[8] = Result_expected_prev[8];
	end
	if (
		( Result_expected_prev[9] !== 1'bx ) && ( Result_prev[9] !== Result_expected_prev[9] )
		&& ((Result_expected_prev[9] !== last_Result_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[9] = Result_expected_prev[9];
	end
	if (
		( Result_expected_prev[10] !== 1'bx ) && ( Result_prev[10] !== Result_expected_prev[10] )
		&& ((Result_expected_prev[10] !== last_Result_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[10] = Result_expected_prev[10];
	end
	if (
		( Result_expected_prev[11] !== 1'bx ) && ( Result_prev[11] !== Result_expected_prev[11] )
		&& ((Result_expected_prev[11] !== last_Result_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[11] = Result_expected_prev[11];
	end
	if (
		( Result_expected_prev[12] !== 1'bx ) && ( Result_prev[12] !== Result_expected_prev[12] )
		&& ((Result_expected_prev[12] !== last_Result_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[12] = Result_expected_prev[12];
	end
	if (
		( Result_expected_prev[13] !== 1'bx ) && ( Result_prev[13] !== Result_expected_prev[13] )
		&& ((Result_expected_prev[13] !== last_Result_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[13] = Result_expected_prev[13];
	end
	if (
		( Result_expected_prev[14] !== 1'bx ) && ( Result_prev[14] !== Result_expected_prev[14] )
		&& ((Result_expected_prev[14] !== last_Result_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[14] = Result_expected_prev[14];
	end
	if (
		( Result_expected_prev[15] !== 1'bx ) && ( Result_prev[15] !== Result_expected_prev[15] )
		&& ((Result_expected_prev[15] !== last_Result_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Result_exp[15] = Result_expected_prev[15];
	end
	if (
		( Result_Compare_expected_prev[0] !== 1'bx ) && ( Result_Compare_prev[0] !== Result_Compare_expected_prev[0] )
		&& ((Result_Compare_expected_prev[0] !== last_Result_Compare_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[0] = Result_Compare_expected_prev[0];
	end
	if (
		( Result_Compare_expected_prev[1] !== 1'bx ) && ( Result_Compare_prev[1] !== Result_Compare_expected_prev[1] )
		&& ((Result_Compare_expected_prev[1] !== last_Result_Compare_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[1] = Result_Compare_expected_prev[1];
	end
	if (
		( Result_Compare_expected_prev[2] !== 1'bx ) && ( Result_Compare_prev[2] !== Result_Compare_expected_prev[2] )
		&& ((Result_Compare_expected_prev[2] !== last_Result_Compare_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[2] = Result_Compare_expected_prev[2];
	end
	if (
		( Result_Compare_expected_prev[3] !== 1'bx ) && ( Result_Compare_prev[3] !== Result_Compare_expected_prev[3] )
		&& ((Result_Compare_expected_prev[3] !== last_Result_Compare_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[3] = Result_Compare_expected_prev[3];
	end
	if (
		( Result_Compare_expected_prev[4] !== 1'bx ) && ( Result_Compare_prev[4] !== Result_Compare_expected_prev[4] )
		&& ((Result_Compare_expected_prev[4] !== last_Result_Compare_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[4] = Result_Compare_expected_prev[4];
	end
	if (
		( Result_Compare_expected_prev[5] !== 1'bx ) && ( Result_Compare_prev[5] !== Result_Compare_expected_prev[5] )
		&& ((Result_Compare_expected_prev[5] !== last_Result_Compare_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[5] = Result_Compare_expected_prev[5];
	end
	if (
		( Result_Compare_expected_prev[6] !== 1'bx ) && ( Result_Compare_prev[6] !== Result_Compare_expected_prev[6] )
		&& ((Result_Compare_expected_prev[6] !== last_Result_Compare_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[6] = Result_Compare_expected_prev[6];
	end
	if (
		( Result_Compare_expected_prev[7] !== 1'bx ) && ( Result_Compare_prev[7] !== Result_Compare_expected_prev[7] )
		&& ((Result_Compare_expected_prev[7] !== last_Result_Compare_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[7] = Result_Compare_expected_prev[7];
	end
	if (
		( Result_Compare_expected_prev[8] !== 1'bx ) && ( Result_Compare_prev[8] !== Result_Compare_expected_prev[8] )
		&& ((Result_Compare_expected_prev[8] !== last_Result_Compare_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[8] = Result_Compare_expected_prev[8];
	end
	if (
		( Result_Compare_expected_prev[9] !== 1'bx ) && ( Result_Compare_prev[9] !== Result_Compare_expected_prev[9] )
		&& ((Result_Compare_expected_prev[9] !== last_Result_Compare_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[9] = Result_Compare_expected_prev[9];
	end
	if (
		( Result_Compare_expected_prev[10] !== 1'bx ) && ( Result_Compare_prev[10] !== Result_Compare_expected_prev[10] )
		&& ((Result_Compare_expected_prev[10] !== last_Result_Compare_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[10] = Result_Compare_expected_prev[10];
	end
	if (
		( Result_Compare_expected_prev[11] !== 1'bx ) && ( Result_Compare_prev[11] !== Result_Compare_expected_prev[11] )
		&& ((Result_Compare_expected_prev[11] !== last_Result_Compare_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[11] = Result_Compare_expected_prev[11];
	end
	if (
		( Result_Compare_expected_prev[12] !== 1'bx ) && ( Result_Compare_prev[12] !== Result_Compare_expected_prev[12] )
		&& ((Result_Compare_expected_prev[12] !== last_Result_Compare_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[12] = Result_Compare_expected_prev[12];
	end
	if (
		( Result_Compare_expected_prev[13] !== 1'bx ) && ( Result_Compare_prev[13] !== Result_Compare_expected_prev[13] )
		&& ((Result_Compare_expected_prev[13] !== last_Result_Compare_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[13] = Result_Compare_expected_prev[13];
	end
	if (
		( Result_Compare_expected_prev[14] !== 1'bx ) && ( Result_Compare_prev[14] !== Result_Compare_expected_prev[14] )
		&& ((Result_Compare_expected_prev[14] !== last_Result_Compare_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[14] = Result_Compare_expected_prev[14];
	end
	if (
		( Result_Compare_expected_prev[15] !== 1'bx ) && ( Result_Compare_prev[15] !== Result_Compare_expected_prev[15] )
		&& ((Result_Compare_expected_prev[15] !== last_Result_Compare_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result_Compare[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_Compare_expected_prev);
		$display ("     Real value = %b", Result_Compare_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Result_Compare_exp[15] = Result_Compare_expected_prev[15];
	end
	if (
		( SGL_expected_prev[0] !== 1'bx ) && ( SGL_prev[0] !== SGL_expected_prev[0] )
		&& ((SGL_expected_prev[0] !== last_SGL_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SGL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SGL_expected_prev);
		$display ("     Real value = %b", SGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SGL_exp[0] = SGL_expected_prev[0];
	end
	if (
		( SGL_expected_prev[1] !== 1'bx ) && ( SGL_prev[1] !== SGL_expected_prev[1] )
		&& ((SGL_expected_prev[1] !== last_SGL_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SGL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SGL_expected_prev);
		$display ("     Real value = %b", SGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SGL_exp[1] = SGL_expected_prev[1];
	end
	if (
		( SGL_expected_prev[2] !== 1'bx ) && ( SGL_prev[2] !== SGL_expected_prev[2] )
		&& ((SGL_expected_prev[2] !== last_SGL_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SGL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SGL_expected_prev);
		$display ("     Real value = %b", SGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SGL_exp[2] = SGL_expected_prev[2];
	end
	if (
		( SGL_expected_prev[3] !== 1'bx ) && ( SGL_prev[3] !== SGL_expected_prev[3] )
		&& ((SGL_expected_prev[3] !== last_SGL_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SGL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SGL_expected_prev);
		$display ("     Real value = %b", SGL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SGL_exp[3] = SGL_expected_prev[3];
	end
	if (
		( Sign0_expected_prev !== 1'bx ) && ( Sign0_prev !== Sign0_expected_prev )
		&& ((Sign0_expected_prev !== last_Sign0_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign0_expected_prev);
		$display ("     Real value = %b", Sign0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Sign0_exp = Sign0_expected_prev;
	end
	if (
		( Sign1_expected_prev !== 1'bx ) && ( Sign1_prev !== Sign1_expected_prev )
		&& ((Sign1_expected_prev !== last_Sign1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign1_expected_prev);
		$display ("     Real value = %b", Sign1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Sign1_exp = Sign1_expected_prev;
	end
	if (
		( Sign2_expected_prev !== 1'bx ) && ( Sign2_prev !== Sign2_expected_prev )
		&& ((Sign2_expected_prev !== last_Sign2_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign2_expected_prev);
		$display ("     Real value = %b", Sign2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign2_exp = Sign2_expected_prev;
	end
	if (
		( Sign3_expected_prev !== 1'bx ) && ( Sign3_prev !== Sign3_expected_prev )
		&& ((Sign3_expected_prev !== last_Sign3_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign3_expected_prev);
		$display ("     Real value = %b", Sign3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_Sign3_exp = Sign3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1024000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DUT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] X;
reg [7:0] Y;
// wires                                               
wire [3:0] DBL;
wire [15:0] Error;
wire [3:0] NEG;
wire [8:0] PP0;
wire [8:0] PP1;
wire [8:0] PP2;
wire [8:0] PP3;
wire [15:0] Result;
wire [15:0] Result_Compare;
wire [3:0] SGL;
wire Sign0;
wire Sign1;
wire Sign2;
wire Sign3;

wire sampler;                             

// assign statements (if any)                          
DUT i1 (
// port map - connection between master ports and signals/registers   
	.DBL(DBL),
	.Error(Error),
	.NEG(NEG),
	.PP0(PP0),
	.PP1(PP1),
	.PP2(PP2),
	.PP3(PP3),
	.Result(Result),
	.Result_Compare(Result_Compare),
	.SGL(SGL),
	.Sign0(Sign0),
	.Sign1(Sign1),
	.Sign2(Sign2),
	.Sign3(Sign3),
	.X(X),
	.Y(Y)
);
// Y[ 7 ]
initial
begin
	Y[7] = 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #30000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #20000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #40000 1'b0;
	Y[7] = #30000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #50000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #40000 1'b0;
	Y[7] = #20000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #40000 1'b1;
	Y[7] = #40000 1'b0;
	Y[7] = #30000 1'b1;
	Y[7] = #70000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #40000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #20000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #20000 1'b1;
	Y[7] = #30000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #20000 1'b0;
	Y[7] = #20000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #40000 1'b1;
	Y[7] = #30000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #20000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #10000 1'b1;
	Y[7] = #10000 1'b0;
	Y[7] = #20000 1'b1;
end 
// Y[ 6 ]
initial
begin
	Y[6] = 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #30000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #20000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #40000 1'b0;
	Y[6] = #20000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #40000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #20000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #40000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #40000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #40000 1'b1;
	Y[6] = #30000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #30000 1'b0;
	Y[6] = #40000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #30000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #40000 1'b1;
	Y[6] = #40000 1'b0;
	Y[6] = #10000 1'b1;
	Y[6] = #30000 1'b0;
	Y[6] = #70000 1'b1;
	Y[6] = #20000 1'b0;
	Y[6] = #20000 1'b1;
	Y[6] = #10000 1'b0;
	Y[6] = #20000 1'b1;
	Y[6] = #40000 1'b0;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b0;
	Y[5] = #30000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #20000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #60000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #30000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #20000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #20000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #30000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #30000 1'b1;
	Y[5] = #20000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #40000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #60000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #30000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #30000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #30000 1'b0;
	Y[5] = #20000 1'b1;
	Y[5] = #40000 1'b0;
	Y[5] = #30000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #20000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #30000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #20000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #10000 1'b0;
	Y[5] = #10000 1'b1;
	Y[5] = #10000 1'b0;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #30000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #30000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #50000 1'b0;
	Y[4] = #40000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #70000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #30000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #30000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #80000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #50000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #30000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #10000 1'b0;
	Y[4] = #10000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #20000 1'b1;
	Y[4] = #20000 1'b0;
	Y[4] = #10000 1'b1;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
	Y[3] = #80000 1'b1;
	Y[3] = #30000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #40000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #20000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #20000 1'b0;
	Y[3] = #30000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #20000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #30000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #50000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #30000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #40000 1'b1;
	Y[3] = #90000 1'b0;
	Y[3] = #30000 1'b1;
	Y[3] = #30000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #40000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #10000 1'b0;
	Y[3] = #10000 1'b1;
	Y[3] = #40000 1'b0;
	Y[3] = #20000 1'b1;
	Y[3] = #10000 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
	Y[2] = #30000 1'b1;
	Y[2] = #20000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #40000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #70000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #20000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #20000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #30000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #30000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #50000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #30000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #30000 1'b1;
	Y[2] = #60000 1'b0;
	Y[2] = #40000 1'b1;
	Y[2] = #20000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #30000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #20000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
	Y[2] = #20000 1'b1;
	Y[2] = #20000 1'b0;
	Y[2] = #10000 1'b1;
	Y[2] = #10000 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #60000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #40000 1'b0;
	Y[1] = #30000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #20000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #50000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #30000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #80000 1'b0;
	Y[1] = #50000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #40000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #30000 1'b1;
	Y[1] = #20000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #30000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #30000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #10000 1'b0;
	Y[1] = #20000 1'b1;
	Y[1] = #50000 1'b0;
	Y[1] = #10000 1'b1;
	Y[1] = #20000 1'b0;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b0;
	Y[0] = #30000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #30000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #40000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #50000 1'b1;
	Y[0] = #70000 1'b0;
	Y[0] = #30000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #80000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #10000 1'b0;
	Y[0] = #50000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #30000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #20000 1'b1;
	Y[0] = #20000 1'b0;
	Y[0] = #10000 1'b1;
	Y[0] = #50000 1'b0;
end 
// X[ 7 ]
always
begin
	X[7] = 1'b1;
	X[7] = #128000 1'b0;
	#128000;
end 
// X[ 6 ]
always
begin
	X[6] = 1'b0;
	X[6] = #64000 1'b1;
	#64000;
end 
// X[ 5 ]
always
begin
	X[5] = 1'b0;
	X[5] = #32000 1'b1;
	#32000;
end 
// X[ 4 ]
always
begin
	X[4] = 1'b0;
	X[4] = #16000 1'b1;
	#16000;
end 
// X[ 3 ]
always
begin
	X[3] = 1'b0;
	X[3] = #8000 1'b1;
	#8000;
end 
// X[ 2 ]
always
begin
	X[2] = 1'b0;
	X[2] = #4000 1'b1;
	#4000;
end 
// X[ 1 ]
always
begin
	X[1] = 1'b0;
	X[1] = #2000 1'b1;
	#2000;
end 
// X[ 0 ]
always
begin
	X[0] = 1'b0;
	X[0] = #1000 1'b1;
	#1000;
end 

DUT_vlg_sample_tst tb_sample (
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

DUT_vlg_check_tst tb_out(
	.DBL(DBL),
	.Error(Error),
	.NEG(NEG),
	.PP0(PP0),
	.PP1(PP1),
	.PP2(PP2),
	.PP3(PP3),
	.Result(Result),
	.Result_Compare(Result_Compare),
	.SGL(SGL),
	.Sign0(Sign0),
	.Sign1(Sign1),
	.Sign2(Sign2),
	.Sign3(Sign3),
	.sampler_rx(sampler)
);
endmodule

